version: '3.8'

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  job-queue-system:
    build: .
    restart: unless-stopped
    ports:
      - "8080:8080"  # REST API
      - "9090:9090"  # gRPC (future)
      - "9091:9091"  # Metrics
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # Redis configuration
      JQS_REDIS_HOST: redis
      JQS_REDIS_PORT: 6379
      JQS_REDIS_PASSWORD: ""
      JQS_REDIS_DATABASE: 0
      
      # Server configuration
      JQS_SERVER_HOST: 0.0.0.0
      JQS_SERVER_PORT: 8080
      JQS_SERVER_GRPC_PORT: 9090
      
      # Worker configuration
      JQS_WORKER_COUNT: 4
      JQS_WORKER_MAX_CONCURRENCY: 100
      JQS_WORKER_POLL_INTERVAL: 1s
      JQS_WORKER_JOB_TIMEOUT: 5m
      
      # Scheduler configuration
      JQS_SCHEDULER_ENABLED: true
      JQS_SCHEDULER_POLL_INTERVAL: 30s
      JQS_SCHEDULER_BATCH_SIZE: 100
      
      # Metrics configuration
      JQS_METRICS_ENABLED: true
      JQS_METRICS_PORT: 9091
      
      # Logging configuration
      JQS_LOGGING_LEVEL: info
      JQS_LOGGING_FORMAT: json
    volumes:
      - ./config:/app/config:ro

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: redis:redis:6379
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: job-queue-network